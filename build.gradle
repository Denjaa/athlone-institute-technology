
plugins {
    id 'java'
    id 'io.spring.dependency-management' version "1.0.11.RELEASE"
    id 'org.springframework.boot' version '2.6.1'
    id 'pl.allegro.tech.build.axion-release' version '1.13.6'
    id 'jp.classmethod.aws.reboot.cloudformation' version '0.45'
    id "org.sonarqube" version "3.0"
    id "com.palantir.docker" version "0.22.1"
    id "com.palantir.docker-run" version "0.22.1"
}

version = scmVersion.version

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web' //allows to work with web
    implementation 'org.springframework.boot:spring-boot-starter-validation' //
    implementation 'org.springframework.boot:spring-boot-starter-actuator' // useful ends point such as health check
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa' // work with database
    implementation 'org.springframework.boot:spring-boot-devtools' // help to restart when new changes in code available
    implementation group: 'com.h2database', name: 'h2', version: '1.4.200' // in memory database running for communication

    compileOnly 'org.projectlombok:lombok:1.18.20'
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

String dockerHubUsernameProperty = findProperty('dockerHubUsername') ?: 'morozovd'
String imageName = "${dockerHubUsernameProperty}/continious-integration-and-development-assessment:$version"

docker {
    name imageName
    files "build/libs/${bootJar.archiveFileName.get()}"
    buildArgs([JAR_FILE: bootJar.archiveFileName.get()])
}

dockerRun {
    name project.name
    image imageName
    ports '8080:8080'
    clean true
}
